# Kong Configuration
x-kong-config: &kong-env
  KONG_DATABASE: ${KONG_DATABASE:-postgres}
  KONG_PG_DATABASE: ${KONG_PG_DATABASE:-kong}
  KONG_PG_HOST: db
  KONG_PG_USER: ${KONG_PG_USER:-kong}
  KONG_PG_PASSWORD_FILE: /run/secrets/kong_postgres_password

services:
  # # Kong Database new configuration service
  # kong-migrations:
  #   image: "${KONG_DOCKER_TAG:-kong:latest}"
  #   command: kong migrations bootstrap
  #   profiles: ["database"]
  #   depends_on:
  #     - db
  #   environment:
  #     <<: *kong-env
  #   secrets:
  #     - kong_postgres_password
  #   restart: on-failure

  # # Kong Database configuration modification service
  # kong-migrations-up:
  #   image: "${KONG_DOCKER_TAG:-kong:latest}"
  #   command: kong migrations up && kong migrations finish
  #   profiles: ["database"]
  #   depends_on:
  #     - db
  #   environment:
  #     <<: *kong-env
  #   secrets:
  #     - kong_postgres_password
  #   restart: on-failure

  # # Kong Service
  # kong:
  #   image: "${KONG_DOCKER_TAG:-kong:latest}"
  #   user: "${KONG_USER:-kong}"
  #   environment:
  #     <<: *kong-env
  #     KONG_ADMIN_ACCESS_LOG: /dev/stdout
  #     KONG_ADMIN_ERROR_LOG: /dev/stderr
  #     KONG_PROXY_LISTEN: "${KONG_PROXY_LISTEN:-0.0.0.0:8000}"
  #     KONG_ADMIN_LISTEN: "${KONG_ADMIN_LISTEN:-0.0.0.0:8001}"
  #     KONG_ADMIN_GUI_LISTEN: "${KONG_ADMIN_GUI_LISTEN:-0.0.0.0:8002}"
  #     KONG_PROXY_ACCESS_LOG: /dev/stdout
  #     KONG_PROXY_ERROR_LOG: /dev/stderr
  #     KONG_PREFIX: ${KONG_PREFIX:-/var/run/kong}
  #     # KONG_DECLARATIVE_CONFIG: "/opt/kong/kong.yaml"
  #   secrets:
  #     - kong_postgres_password
  #   ports:
  #     # The following two environment variables default to an insecure value (0.0.0.0)
  #     # according to the CIS Security test.
  #     - "${KONG_INBOUND_PROXY_LISTEN:-0.0.0.0}:8000:8000/tcp"
  #     - "${KONG_INBOUND_SSL_PROXY_LISTEN:-0.0.0.0}:8443:8443/tcp"
  #     # Making them mandatory but undefined, like so would be backwards-breaking:
  #     # - "${KONG_INBOUND_PROXY_LISTEN?Missing inbound proxy host}:8000:8000/tcp"
  #     # - "${KONG_INBOUND_SSL_PROXY_LISTEN?Missing inbound proxy ssl host}:8443:8443/tcp"
  #     # Alternative is deactivating check 5.13 in the security bench, if we consider Kong's own config to be enough security here

  #     - "127.0.0.1:8001:8001/tcp"
  #     - "127.0.0.1:8444:8444/tcp"
  #     - "127.0.0.1:8002:8002/tcp"
  #   healthcheck:
  #     test: ["CMD", "kong", "health"]
  #     interval: 10s
  #     timeout: 10s
  #     retries: 10
  #   restart: on-failure:5
  #   read_only: true
  #   volumes:
  #     - kong_prefix_vol:${KONG_PREFIX:-/var/run/kong}
  #     - kong_tmp_vol:/tmp
  #     # - ./config:/opt/kong
  #   security_opt:
  #     - no-new-privileges

  # # Kong Database Service
  # db:
  #   image: postgres:9.5
  #   profiles: ["database"]
  #   environment:
  #     POSTGRES_DB: ${KONG_PG_DATABASE:-kong}
  #     POSTGRES_USER: ${KONG_PG_USER:-kong}
  #     POSTGRES_PASSWORD_FILE: /run/secrets/kong_postgres_password
  #   secrets:
  #     - kong_postgres_password
  #   healthcheck:
  #     test:
  #       [
  #         "CMD",
  #         "pg_isready",
  #         "-d",
  #         "${KONG_PG_DATABASE:-kong}",
  #         "-U",
  #         "${KONG_PG_USER:-kong}",
  #       ]
  #     interval: 30s
  #     timeout: 30s
  #     retries: 3
  #   restart: on-failure
  #   stdin_open: true
  #   tty: true
  #   volumes:
  #     - kong_data:/var/lib/postgresql/data

  # # User Management Service
  user_service:
    build:
      context: ./services/user_service
      dockerfile: Dockerfile
    volumes:
      - ./services/user_service:/code/
    depends_on:
      # - postgres_db
      - broker
      # - schema-registry
    ports:
      - "8030:8000"

  # Product Management Service
  product_service:
    build:
      context: ./services/product_service
      dockerfile: Dockerfile
    volumes:
      - ./services/product_service:/code/
    depends_on:
      # - postgres_db
      - broker
      # - schema-registry
    ports:
      - "8031:8031"



  # Product Consumer Serivce
  product_db_service:
    build:
      context: ./services/product_db_service
      dockerfile: Dockerfile
    volumes:
      - ./services/product_db_service:/code/
    depends_on:
      - product_db
      - broker
      # - schema-registry
    ports:
      - "8036:8000"

  # Postgres DB Service
  product_db:
    image: postgres:latest
    restart: always
    container_name: product_db_cont
    environment:
      - POSTGRES_USER=rehan
      - POSTGRES_PASSWORD=rehan
      - POSTGRES_DB=products_database

    ports:
      - "5433:5432"
    volumes:
      - postgres_product_db:/var/lib/postgresql/data

  # Payment Service
  # payment_service:
  #   build:
  #     context: ./services/payment_service
  #     dockerfile: Dockerfile
  #   volumes:
  #     - ./services/payment_service:/code/
  #   depends_on:
  #     # - postgres_db
  #     - broker
  #     # - schema-registry
  #   ports:
  #     - "8032:8032"

  # # Order Service
  # order_service:
  #   build:
  #     context: ./services/order_service
  #     dockerfile: Dockerfile
  #   volumes:
  #     - ./services/order_service:/code/
  #   depends_on:
  #     # - postgres_db
  #     - broker
  #     # - schema-registry
  #   ports:
  #     - "8033:8033"

  # # Notification Service
  # notification_service:
  #   build:
  #     context: ./services/notification_service
  #     dockerfile: Dockerfile
  #   volumes:
  #     - ./services/notification_service:/code/
  #   depends_on:
  #     # - postgres_db
  #     - broker
  #     # - schema-registry
  #   ports:
  #     - "8034:8034"

  # # Inventory Service
  # inventory_service:
  #   build:
  #     context: ./services/inventory_service
  #     dockerfile: Dockerfile
  #   volumes:
  #     - ./services/inventory_service:/code/
  #   depends_on:
  #     # - postgres_db
  #     - broker
  #     # - schema-registry
  #   ports:
  #     - "8035:8035"



  # Kafka Broker Service
  broker:
    image: apache/kafka:3.7.0
    hostname: broker
    container_name: broker
    ports:
      - "9092:9092"
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: "CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT"
      KAFKA_ADVERTISED_LISTENERS: "PLAINTEXT_HOST://localhost:9092,PLAINTEXT://broker:19092"
      KAFKA_PROCESS_ROLES: "broker,controller"
      # nodeid@servername:port
      KAFKA_CONTROLLER_QUORUM_VOTERS: "1@broker:29093"
      KAFKA_LISTENERS: "CONTROLLER://:29093,PLAINTEXT_HOST://:9092,PLAINTEXT://:19092"
      KAFKA_INTER_BROKER_LISTENER_NAME: "PLAINTEXT"
      KAFKA_CONTROLLER_LISTENER_NAMES: "CONTROLLER"
      CLUSTER_ID: "4L6g3nShT-eMCtK--X86sw"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_LOG_DIRS: "/tmp/kraft-combined-logs"
    extra_hosts:
      - "broker:127.0.0.1"

  # Kafka UI service
  kafka-ui:
    image: provectuslabs/kafka-ui
    container_name: kafka-ui
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: "Local Kafka Cluster"
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: "broker:19092"
      DYNAMIC_CONFIG_ENABLED: "true"
    depends_on:
      - broker

  # Schema Registery Service from Confluent
  # schema-registry:
  #   image: confluentinc/cp-schema-registry:6.1.1
  #   depends_on:
  #     - broker
  #   ports:
  #     - "8081:8081"
  #   environment:
  #     SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: broker:19092
  #     SCHEMA_REGISTRY_HOST_NAME: schema-registry
  #     SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081

secrets:
  kong_postgres_password:
    file: ./kong/services/POSTGRES_PASSWORD

volumes:
  postgres_product_db:
    driver: local
  kong_data: {}
  kong_prefix_vol:
    driver_opts:
      type: tmpfs
      device: tmpfs
  kong_tmp_vol:
    driver_opts:
      type: tmpfs
      device: tmpfs

networks:
  default:
    driver: bridge
